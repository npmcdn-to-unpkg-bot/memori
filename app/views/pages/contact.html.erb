<div id="page-naem-container" class="page-naem-container white-bg" data-stellar-background-ratio="0.1" data-stellar-vertical-offset="0">
  <div class="parallax-style">
    <div class="container text-center">
      <h2 class="page-name">Contact Us</h2>
      <div class="current-page-link">
        <a href="/">Home </a> <i class="fa fa-angle-double-right"></i> Contact
      </div>
    </div><!-- /.container -->
  </div><!-- /.parallax-style -->
</div><!-- /.page-naem-container -->


<section id="contact-page" class="page contact-page page-container">
	<div class="container">
		<div class="row">
			<!-- Post Container -->
			<div id="post-container" class="col-md-12 post-container" role="main">
				<div class="row">
          <div id="react-contact-section">
          </div>
				</div>
			</div><!-- /.post-container -->
			<!-- Post Container End -->
		</div><!-- /.row -->
	</div><!-- /.container -->
</section>


<script type="text/babel">
  var ContactBox = React.createClass({
    handleContactSubmit: function(message) {
      console.log(message);
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        type: 'POST',
        data: message,
        success: function(data) {
          console.log(data);
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },

    getInitialState: function() {
      return { data: [] };
    },

    render: function() {
      return (
        <div className="ContactBox">
          <div className="col-md-8">
            <ContactForm onContactSubmit={this.handleContactSubmit} />
          </div>
          <div className="col-md-4">
            <h4 className="contact-title">Contact Info </h4>
            <p>Contact us if you have any feedback or questions. We are always looking for testimonials from people that love our site as well as requests for new features.</p>
          </div>
        </div>
      )
    }
  });

  var ContactForm = React.createClass({
    getInitialState: function() {
      return {
        name: '',
        email: '',
        content: ''
      };
    },

    handleSubmit: function(e) {
      e.preventDefault();
      var message = new Object();

      this.props.onContactSubmit({
        message: {
          name: this.state.name,
          email: this.state.email,
          content: this.state.content
        }
      });
    },

    validateEmail: function(value) {
      // regex from http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
      var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(value);
    },

    commonValidate: function(value) {
      return (value ? true : false);
    },

    setName: function(event) {
      this.setState({
        name: event.target.value
      });
    },

    setEmail: function(event) {
      this.setState({
        email: event.target.value
      });
    },

    setContent: function(event) {
      this.setState({
        content: event.target.value
      });
    },

    render: function() {
      return (
        <form className="ContactForm" onSubmit={this.handleSubmit}>

        <TextInput
         uniqueName="name"
         text="Your Name"
         required={true}
         minCharacters={3}
         validate={this.commonValidate}
         onChange={this.setName}
         errorMessage="Name is invalid"
         emptyMessage="Name is required" />

        <TextInput
           uniqueName="email"
           text="Email Address"
           required={true}
           minCharacters={6}
           validate={this.validateEmail}
           onChange={this.setEmail}
           errorMessage="Email is invalid"
           emptyMessage="Email is required" />

         <TextArea
          uniqueName="content"
          text="Message"
          required={true}
          minCharacters={30}
          validate={this.commonValidate}
          onChange={this.setContent}
          errorMessage="Message is invalid"
          emptyMessage="Message is required" />
         <br /><br />

          <input type="submit" className="submit-btn submit md-btn btn" value="Send Now" />
        </form>
      );
    }
  });

  var InputError = React.createClass({
    getInitialState: function() {
      return {
        message: 'Input is invalid'
      };
    },

    render: function() {
      var errorClass = classNames(this.props.className, {
        'error_container': true,
        'visible': this.props.visible,
        'invisible': !this.props.visible
      });

      return (
        <div className={errorClass}>
          <span>{this.props.errorMessage}</span>
        </div>
      )
    }
  });

  var TextInput = React.createClass({
    getInitialState: function() {
      return {
        isEmpty: true,
        value: null,
        valid: false,
        errorMessage: "Input is invalid",
        errorVisible: false
      };
    },

    handleChange: function(event) {
      this.validation(event.target.value);

      if (this.props.onChange) {
        this.props.onChange(event);
      }
    },

    validation: function(value, valid) {
      if (typeof valid === 'undefined') {
        valid = true;
      }

      var message = "";
      var errorVisible = false;

      if (!valid) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      } else if (this.props.required && jQuery.isEmptyObject(value)) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      } else if (value.length < this.props.minCharacters) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      }

      this.setState({
        value: value,
        isEmpty: jQuery.isEmptyObject(value),
        valid: valid,
        errorMessage: message,
        errorVisible: errorVisible
      });
    },

    handleBlur: function(event) {
      var valid = this.props.validate(event.target.value);
      this.validation(event.target.value, valid);
    },

    render: function() {
      return (
        <div className={this.props.uniqueName}>
          <input
            placeholder={this.props.text}
            className={'form-control input input-' + this.props.uniqueName}
            onChange={this.handleChange}
            onBlur={this.handleBlur}
            value={this.state.value} />

          <InputError
            visible={this.state.errorVisible}
            errorMessage={this.state.errorMessage} />
        </div>
      );
    }
  });

  var TextArea = React.createClass({
    getInitialState: function() {
      return {
        isEmpty: true,
        value: null,
        valid: false,
        errorMessage: "Input is invalid",
        errorVisible: false
      };
    },

    handleChange: function(event) {
      this.validation(event.target.value);

      if (this.props.onChange) {
        this.props.onChange(event);
      }
    },

    validation: function(value, valid) {
      if (typeof valid === 'undefined') {
        valid = true;
      }

      var message = "";
      var errorVisible = false;

      if (!valid) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      } else if (this.props.required && jQuery.isEmptyObject(value)) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      } else if (value.length < this.props.minCharacters) {
        message = this.props.errorMessage;
        valid = false;
        errorVisible = true;
      }

      this.setState({
        value: value,
        isEmpty: jQuery.isEmptyObject(value),
        valid: valid,
        errorMessage: message,
        errorVisible: errorVisible
      });
    },

    handleBlur: function(event) {
      var valid = this.props.validate(event.target.value);
      this.validation(event.target.value, valid);
    },

    render: function() {
      return (
        <div className={this.props.uniqueName}>
          <textarea
            placeholder={this.props.text}
            className={'form-control input input-' + this.props.uniqueName}
            onChange={this.handleChange}
            onBlur={this.handleBlur}
            rows='5'
            value={this.state.value}></textarea>

          <InputError
            visible={this.state.errorVisible}
            errorMessage={this.state.errorMessage} />
        </div>
      );
    }
  });

  ReactDOM.render(
    <ContactBox url="/api/v1/contact_admin" />,
    document.getElementById('react-contact-section')
  )
</script>
